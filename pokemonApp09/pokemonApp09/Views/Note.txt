//
//  Note.swift
//  pokemonApp09
//
//  Created by Sanoj on 23/03/23.
//

import Foundation


When using observed objects there are three key things we need to work with: the ObservableObject protocol is used with some sort of class that can store data, the @ObservedObject property wrapper is used inside a view to store an observable object instance, and the @Published property wrapper is added to any properties inside an observed object that should cause views to update when they change.

Tip: It is really important that you use @ObservedObject only with views that were passed in from elsewhere. You should not use this property wrapper to create the initial instance of an observable object – that’s what @StateObject is for.

As an example, here’s a UserProgress class that conforms to ObservableObject:

class UserProgress: ObservableObject {
    @Published var score = 0
}

I know that doesn’t look like much code, but that’s because SwiftUI is doing a remarkable amount on our behalf! There are two things that matter in there:

The ObservableObject conformance allows instances of this class to be used inside views, so that when important changes happen the view will reload.
The @Published property wrapper tells SwiftUI that changes to score should trigger view reloads.
